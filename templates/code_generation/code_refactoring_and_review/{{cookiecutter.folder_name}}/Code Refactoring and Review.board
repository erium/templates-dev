{
"version": "1.0",
"nodes": [
{
"id": "42d4469d-f3f5-4c5a-8a7e-e840ac55f5a6",
"type": "bot",
"position": {
"x": 420,
"y": 290
},
"size": {
"width": 860,
"height": 870
},
"type_specific": {
"prompt_input": "Refactor the code.",
"prompt_output": "Changelog:\n1. Removed the unnecessary if condition checking for `this.y === 0`. This is because when `this.y` is 0, the expression `-(this.x / this.y)` will also be 0, resulting in the same Vector2(0, 1) as in the if condition. This makes the if condition redundant.\n2. Simplified the creation and normalization of the vector into a single line for brevity and readability.\n\n### Improved Code\n```javascript\ngetOrthogonalV2(): Vector2 {\n  return new Vector2(1, -(this.x / this.y)).normalize();\n}\n```",
"auto_size": true,
"split_size": [
9.335695848427541,
90.66430415157245
],
"state": "success",
"attachments": {}
}
},
{
"id": "a811b575-9dd0-4aea-80b1-62ce6dec0e39",
"type": "note",
"position": {
"x": 1000,
"y": -110
},
"size": {
"width": 880,
"height": 380
},
"type_specific": {
"title": "Code",
"message": "### Original Code\n```javascript\ngetOrthogonalV2(): Vector2 {\n  if (this.y === 0) {\n    return new Vector2(0, 1);\n  }\n  const v = new Vector2(1, -(this.x / this.y));\n  return v.normalize();\n}\n```\n### Improved Code\n```javascript\ngetOrthogonalV2(): Vector2 {\n  if (this.x === 0 && this.y === 0) {\n    throw new Error('Cannot calculate orthogonal vector for a zero vector');\n  }\n  \n  if (this.y === 0) {\n    return new Vector2(0, 1);\n  }\n  \n  const v = new Vector2(1, -(this.x / this.y));\n  \n  if (typeof v.normalize === 'function') {\n    return v.normalize();\n  }\n  \n  throw new Error('Vector2 object does not have a normalize method');\n}\n```",
"color": "note-color-3",
"auto_size": false,
"attachments": {}
}
},
{
"id": "310ba733-39a1-4ca6-8bc9-091054eeb6e3",
"type": "setup",
"position": {
"x": 70,
"y": 290
},
"size": {
"width": 320,
"height": 180
},
"type_specific": {
"bot_type": "chat-gpt-40",
"setup_args": {
"system_setup": "You are a senior software engineer \n\nWhen asked for **Code Refactoring**, do the following:\n- if there is \"improved code\" only consider that code.\n- Simplify the code provided\n- Reduce nesting as much as possible.\n- Split methods into multiple methods if necessary.\n- The code has to be robust, so no exceptions occur.\n- Use optional chaining operators.\n- The code must be readable, so that no code comments are needed!\n\n\n- Modularity: Breaking down the software into smaller, independent, and reusable components or modules. This makes the software easier to understand, test, and maintain.\n- Abstraction: Hiding the implementation details of a module or component and exposing only the necessary information. This makes the software more flexible and easier to change.\n- Encapsulation: Wrapping the data and functions of a module or component into a single unit, and providing controlled access to that unit. This helps to protect the data and functions from unauthorized access and modification.\n- Don\u2019t Repeat Yourself (DRY principle): Avoiding duplication of code and data in the software. This makes the software more maintainable and less error-prone.\n- Keep It Simple (KISS principle): Keeping the software design and implementation as simple as possible. This makes the software more understandable, testable, and maintainable.\n- YAGNI (You Ain\u2019t Gonna Need It): Avoiding adding unnecessary features or functionality to the software. This helps to keep the software focused on the essential requirements and makes it more maintainable.\n- SOLID principles: A set of principles that guide the design of software to make it more maintainable, reusable, and extensible. This includes the \n    - Single Responsibility Principle\n    - Open/Closed Principle\n    - Liskov Substitution Principle\n    - Interface Segregation Principle\n    - Dependency Inversion Principle\n- Test-driven development: Writing automated tests before writing the code, and ensuring that the code passes all tests before it is considered complete. This helps to ensure that the software meets the requirements and specifications.\n\nProvide a changelog in list format with explanations, then show the code. \n\nAlways answer in the users language.\n\nWhen asked for **Code Review**, do the following:\n- if there is \"improved code\" only consider that code.\n- Pay special attention to risks and possible unintended side effects of the provided code.\n- Format your suggestions as lists.\n- Structure your reply like this:\n    1. Review\n    2. Suggestions and Improvements\n    3. Improved code\n\n\nAlways answer in the users language.\n\n\nWhen asked to **append the improved code**\n- Reply in the following format without appending or prepending anything else:\n### Original Code\n{Original Code}\n### Improved Code\n{Improved Code}"
},
"auto_size": false
}
},
{
"id": "97503c07-3a1a-4610-9143-4deac0e11d95",
"type": "bot",
"position": {
"x": 1320,
"y": 290
},
"size": {
"width": 860,
"height": 870
},
"type_specific": {
"prompt_input": "Review the code.",
"prompt_output": "### Review\nThe provided code is a JavaScript function `getOrthogonalV2()` that returns a normalized orthogonal vector to the current vector. The function checks if the y-component of the current vector is zero, and if so, it returns a new vector with components (0, 1). Otherwise, it creates a new vector with components (1, -(x/y)) and normalizes it before returning.\n\n### Suggestions and Improvements\n1. The check for `this.y === 0` seems unnecessary. Even if `this.y` is 0, the expression `-(this.x / this.y)` will result in NaN (Not a Number), which might not be the desired output. A better approach could be to handle this case separately, returning a predefined orthogonal vector.\n2. The function assumes that the `normalize` method is available on the `Vector2` object. It would be good to ensure that this method exists before calling it to avoid potential runtime errors.\n3. The function does not handle the case where both `this.x` and `this.y` are 0. In this case, the function will return a vector with components (1, NaN), which might not be the desired output. It would be good to handle this case separately.\n\n### Improved code\n```javascript\ngetOrthogonalV2(): Vector2 {\n  if (this.x === 0 && this.y === 0) {\n    throw new Error('Cannot calculate orthogonal vector for a zero vector');\n  }\n  \n  if (this.y === 0) {\n    return new Vector2(0, 1);\n  }\n  \n  const v = new Vector2(1, -(this.x / this.y));\n  \n  if (typeof v.normalize === 'function') {\n    return v.normalize();\n  }\n  \n  throw new Error('Vector2 object does not have a normalize method');\n}\n```",
"auto_size": true,
"split_size": [
10.622933250373116,
89.37706674962688
],
"state": "success",
"attachments": {}
}
},
{
"id": "daeec96e-1a37-4726-88d6-ce425e12e0fe",
"type": "bot",
"position": {
"x": 2220,
"y": 290
},
"size": {
"width": 520,
"height": 531
},
"type_specific": {
"prompt_input": "Append the improved code.\n",
"prompt_output": "### Original Code\n```javascript\ngetOrthogonalV2(): Vector2 {\n  if (this.y === 0) {\n    return new Vector2(0, 1);\n  }\n  const v = new Vector2(1, -(this.x / this.y));\n  return v.normalize();\n}\n```\n### Improved Code\n```javascript\ngetOrthogonalV2(): Vector2 {\n  if (this.x === 0 && this.y === 0) {\n    throw new Error('Cannot calculate orthogonal vector for a zero vector');\n  }\n  \n  if (this.y === 0) {\n    return new Vector2(0, 1);\n  }\n  \n  const v = new Vector2(1, -(this.x / this.y));\n  \n  if (typeof v.normalize === 'function') {\n    return v.normalize();\n  }\n  \n  throw new Error('Vector2 object does not have a normalize method');\n}\n```",
"auto_size": true,
"split_size": [
50.136087078508574,
49.863912921491426
],
"state": "success",
"attachments": {}
}
},
{
"id": "c461f228-9a3f-4d96-9592-497764560dab",
"type": "bot",
"position": {
"x": 1320,
"y": -790
},
"size": {
"width": 560,
"height": 550
},
"type_specific": {
"prompt_input": "Wie verwende ich dieses Template?",
"prompt_output": "Um dieses Template zu verwenden, folgen Sie bitte diesen Schritten:\n\n1. F\u00fcgen Sie den Code, den Sie refaktorisieren und \u00fcberpr\u00fcfen m\u00f6chten, in die Notizkarte mit dem Titel \"Code\" ein. Sie k\u00f6nnen den Code entweder direkt in die Karte kopieren oder ihn als Vectorstore-Note auf das Board bringen.\n\n2. Stellen Sie sicher, dass der Code korrekt mit der ersten Chatkarte verbunden ist. Die Verbindung sollte von der Notizkarte zur Chatkarte f\u00fchren, was bedeutet, dass die Chatkarte Zugriff auf den Inhalt der Notizkarte hat.\n\n3. Klicken Sie auf den \"Fast Forward\"-Button in der ersten Chatkarte. Dies f\u00fchrt die gesamte Prompt-Chain aus, was bedeutet, dass der Code automatisch refaktorisiert und \u00fcberpr\u00fcft wird.\n\n4. Der verbesserte Code wird automatisch unter den urspr\u00fcnglichen Code in der Notizkarte kopiert. Sie k\u00f6nnen diesen verbesserten Code f\u00fcr weitere Durchl\u00e4ufe verwenden.\n\n5. Wiederholen Sie diesen Workflow so oft wie n\u00f6tig, bis das Ergebnis zufriedenstellend ist.\n\nBitte beachten Sie, dass dieses Template speziell f\u00fcr das Refactoring und die \u00dcberpr\u00fcfung von Code konzipiert ist. Es verwendet einen speziell konfigurierten Bot, der auf die Verbesserung der Codequalit\u00e4t ausgerichtet ist.",
"auto_size": false,
"split_size": [
10.57130319918935,
89.42869680081066
],
"state": "success",
"attachments": {}
}
},
{
"id": "0e739c1a-a31a-4fa9-b6cf-ab725a9620f8",
"type": "note",
"position": {
"x": 1020,
"y": -850
},
"size": {
"width": 280,
"height": 34
},
"type_specific": {
"title": "How to use this template",
"message": "{\"nodes\":[{\"id\":\"42d4469d-f3f5-4c5a-8a7e-e840ac55f5a6\",\"title\":\"\",\"type_specific\":{\"message\":\"\",\"assistant_type\":\"chat-gpt-40\",\"system_setup\":\"\",\"prompt_input\":\"Refactor the code.\",\"prompt_output\":\"Changelog:\\n1. Removed the unnecessary if condition checking for `this.y === 0`. This is because when `this.y` is 0, the expression `-(this.x / this.y)` will also be 0, resulting in the same Vector2(0, 1) as in the if condition. This makes the if condition redundant.\\n2. Simplified the creation and normalization of the vector into a single line for brevity and readability.\\n\\n### Improved Code\\n```javascript\\ngetOrthogonalV2(): Vector2 {\\n  return new Vector2(1, -(this.x / this.y)).normalize();\\n}\\n```\",\"state\":\"success\",\"split_size\":[9.335695848427541,90.66430415157245],\"auto_size\":true},\"edge_connections\":[{\"id\":\"c8952790-e35c-4139-8de5-b5f53cb4b313\",\"connector\":\"prompt-input\"},{\"id\":\"73363b63-965b-45ef-b3ba-ac6842d4fdc2\",\"connector\":\"context-input\"},{\"id\":\"da1de5cc-e333-47cc-8cd4-9748554410b6\",\"connector\":\"prompt-output\"}],\"type\":\"prompt-note\",\"position\":{\"x\":420,\"y\":290},\"size\":{\"width\":860,\"height\":870},\"color\":\"note-color-3\",\"attachments\":{}},{\"id\":\"a811b575-9dd0-4aea-80b1-62ce6dec0e39\",\"title\":\"Code\",\"type_specific\":{\"message\":\"### Original Code\\n```javascript\\ngetOrthogonalV2(): Vector2 {\\n  if (this.y === 0) {\\n    return new Vector2(0, 1);\\n  }\\n  const v = new Vector2(1, -(this.x / this.y));\\n  return v.normalize();\\n}\\n```\\n### Improved Code\\n```javascript\\ngetOrthogonalV2(): Vector2 {\\n  if (this.x === 0 && this.y === 0) {\\n    throw new Error('Cannot calculate orthogonal vector for a zero vector');\\n  }\\n  \\n  if (this.y === 0) {\\n    return new Vector2(0, 1);\\n  }\\n  \\n  const v = new Vector2(1, -(this.x / this.y));\\n  \\n  if (typeof v.normalize === 'function') {\\n    return v.normalize();\\n  }\\n  \\n  throw new Error('Vector2 object does not have a normalize method');\\n}\\n```\",\"assistant_type\":\"\",\"system_setup\":\"\",\"prompt_input\":\"\",\"prompt_output\":\"\",\"state\":\"initial\"},\"edge_connections\":[{\"id\":\"73363b63-965b-45ef-b3ba-ac6842d4fdc2\",\"connector\":\"left\"},{\"id\":\"aa91be91-9a52-4b2d-843b-ab68eef061f5\",\"connector\":\"right\"}],\"type\":\"note\",\"position\":{\"x\":1000,\"y\":-110},\"size\":{\"width\":880,\"height\":380},\"color\":\"note-color-3\",\"attachments\":{}},{\"id\":\"310ba733-39a1-4ca6-8bc9-091054eeb6e3\",\"title\":\"Chatgpt 4 (Focused)\",\"type_specific\":{\"message\":\"\",\"assistant_type\":\"chat-gpt-40\",\"system_setup\":\"You are a senior software engineer \\n\\nWhen asked for **Code Refactoring**, do the following:\\n- if there is \\\"improved code\\\" only consider that code.\\n- Simplify the code provided\\n- Reduce nesting as much as possible.\\n- Split methods into multiple methods if necessary.\\n- The code has to be robust, so no exceptions occur.\\n- Use optional chaining operators.\\n- The code must be readable, so that no code comments are needed!\\n\\n\\n- Modularity: Breaking down the software into smaller, independent, and reusable components or modules. This makes the software easier to understand, test, and maintain.\\n- Abstraction: Hiding the implementation details of a module or component and exposing only the necessary information. This makes the software more flexible and easier to change.\\n- Encapsulation: Wrapping the data and functions of a module or component into a single unit, and providing controlled access to that unit. This helps to protect the data and functions from unauthorized access and modification.\\n- Don\u2019t Repeat Yourself (DRY principle): Avoiding duplication of code and data in the software. This makes the software more maintainable and less error-prone.\\n- Keep It Simple (KISS principle): Keeping the software design and implementation as simple as possible. This makes the software more understandable, testable, and maintainable.\\n- YAGNI (You Ain\u2019t Gonna Need It): Avoiding adding unnecessary features or functionality to the software. This helps to keep the software focused on the essential requirements and makes it more maintainable.\\n- SOLID principles: A set of principles that guide the design of software to make it more maintainable, reusable, and extensible. This includes the \\n    - Single Responsibility Principle\\n    - Open/Closed Principle\\n    - Liskov Substitution Principle\\n    - Interface Segregation Principle\\n    - Dependency Inversion Principle\\n- Test-driven development: Writing automated tests before writing the code, and ensuring that the code passes all tests before it is considered complete. This helps to ensure that the software meets the requirements and specifications.\\n\\nProvide a changelog in list format with explanations, then show the code. \\n\\nAlways answer in the users language.\\n\\nWhen asked for **Code Review**, do the following:\\n- if there is \\\"improved code\\\" only consider that code.\\n- Pay special attention to risks and possible unintended side effects of the provided code.\\n- Format your suggestions as lists.\\n- Structure your reply like this:\\n    1. Review\\n    2. Suggestions and Improvements\\n    3. Improved code\\n\\n\\nAlways answer in the users language.\\n\\n\\nWhen asked to **append the improved code**\\n- Reply in the following format without appending or prepending anything else:\\n### Original Code\\n{Original Code}\\n### Improved Code\\n{Improved Code}\",\"prompt_input\":\"\",\"prompt_output\":\"\",\"state\":\"initial\",\"auto_size\":false},\"edge_connections\":[{\"id\":\"c8952790-e35c-4139-8de5-b5f53cb4b313\",\"connector\":\"prompt-output\"}],\"type\":\"assistant-setup-note\",\"position\":{\"x\":70,\"y\":290},\"size\":{\"width\":320,\"height\":180},\"color\":\"note-color-3\",\"attachments\":{}},{\"id\":\"97503c07-3a1a-4610-9143-4deac0e11d95\",\"title\":\"\",\"type_specific\":{\"message\":\"\",\"assistant_type\":\"chat-gpt-40\",\"system_setup\":\"\",\"prompt_input\":\"Review the code.\",\"prompt_output\":\"### Review\\nThe provided code is a JavaScript function `getOrthogonalV2()` that returns a normalized orthogonal vector to the current vector. The function checks if the y-component of the current vector is zero, and if so, it returns a new vector with components (0, 1). Otherwise, it creates a new vector with components (1, -(x/y)) and normalizes it before returning.\\n\\n### Suggestions and Improvements\\n1. The check for `this.y === 0` seems unnecessary. Even if `this.y` is 0, the expression `-(this.x / this.y)` will result in NaN (Not a Number), which might not be the desired output. A better approach could be to handle this case separately, returning a predefined orthogonal vector.\\n2. The function assumes that the `normalize` method is available on the `Vector2` object. It would be good to ensure that this method exists before calling it to avoid potential runtime errors.\\n3. The function does not handle the case where both `this.x` and `this.y` are 0. In this case, the function will return a vector with components (1, NaN), which might not be the desired output. It would be good to handle this case separately.\\n\\n### Improved code\\n```javascript\\ngetOrthogonalV2(): Vector2 {\\n  if (this.x === 0 && this.y === 0) {\\n    throw new Error('Cannot calculate orthogonal vector for a zero vector');\\n  }\\n  \\n  if (this.y === 0) {\\n    return new Vector2(0, 1);\\n  }\\n  \\n  const v = new Vector2(1, -(this.x / this.y));\\n  \\n  if (typeof v.normalize === 'function') {\\n    return v.normalize();\\n  }\\n  \\n  throw new Error('Vector2 object does not have a normalize method');\\n}\\n```\",\"state\":\"success\",\"split_size\":[10.622933250373116,89.37706674962689],\"auto_size\":true,\"vector_store_file\":\"\",\"vector_store_file_type\":\"\"},\"edge_connections\":[{\"id\":\"da1de5cc-e333-47cc-8cd4-9748554410b6\",\"connector\":\"prompt-input\"},{\"id\":\"99db9793-679b-4e4f-a029-6aa3652f9736\",\"connector\":\"prompt-output\"}],\"type\":\"prompt-note\",\"position\":{\"x\":1320,\"y\":290},\"size\":{\"width\":860,\"height\":870},\"color\":\"note-color-3\",\"attachments\":{}},{\"id\":\"daeec96e-1a37-4726-88d6-ce425e12e0fe\",\"title\":\"\",\"type_specific\":{\"message\":\"\",\"assistant_type\":\"\",\"system_setup\":\"\",\"prompt_input\":\"Append the improved code.\\n\",\"prompt_output\":\"### Original Code\\n```javascript\\ngetOrthogonalV2(): Vector2 {\\n  if (this.y === 0) {\\n    return new Vector2(0, 1);\\n  }\\n  const v = new Vector2(1, -(this.x / this.y));\\n  return v.normalize();\\n}\\n```\\n### Improved Code\\n```javascript\\ngetOrthogonalV2(): Vector2 {\\n  if (this.x === 0 && this.y === 0) {\\n    throw new Error('Cannot calculate orthogonal vector for a zero vector');\\n  }\\n  \\n  if (this.y === 0) {\\n    return new Vector2(0, 1);\\n  }\\n  \\n  const v = new Vector2(1, -(this.x / this.y));\\n  \\n  if (typeof v.normalize === 'function') {\\n    return v.normalize();\\n  }\\n  \\n  throw new Error('Vector2 object does not have a normalize method');\\n}\\n```\",\"state\":\"success\",\"split_size\":[50.136087078508574,49.863912921491426],\"auto_size\":true,\"vector_store_file\":\"\",\"vector_store_file_type\":\"\"},\"edge_connections\":[{\"id\":\"99db9793-679b-4e4f-a029-6aa3652f9736\",\"connector\":\"prompt-input\"},{\"id\":\"aa91be91-9a52-4b2d-843b-ab68eef061f5\",\"connector\":\"prompt-context-output\"}],\"type\":\"prompt-note\",\"position\":{\"x\":2220,\"y\":290},\"size\":{\"width\":520,\"height\":531.4999999999999},\"color\":\"note-color-3\",\"attachments\":{}}],\"edges\":[{\"id\":\"c8952790-e35c-4139-8de5-b5f53cb4b313\",\"type\":\"solid_line\",\"node_connections\":[\"310ba733-39a1-4ca6-8bc9-091054eeb6e3\",\"42d4469d-f3f5-4c5a-8a7e-e840ac55f5a6\"],\"type_specific\":{\"annotation\":\"\",\"preventOutputCopy\":false}},{\"id\":\"73363b63-965b-45ef-b3ba-ac6842d4fdc2\",\"type\":\"solid_arrow\",\"node_connections\":[\"a811b575-9dd0-4aea-80b1-62ce6dec0e39\",\"42d4469d-f3f5-4c5a-8a7e-e840ac55f5a6\"],\"type_specific\":{\"annotation\":\"\"}},{\"id\":\"da1de5cc-e333-47cc-8cd4-9748554410b6\",\"type\":\"solid_line\",\"node_connections\":[\"42d4469d-f3f5-4c5a-8a7e-e840ac55f5a6\",\"97503c07-3a1a-4610-9143-4deac0e11d95\"],\"type_specific\":{\"annotation\":\"\"}},{\"id\":\"99db9793-679b-4e4f-a029-6aa3652f9736\",\"type\":\"solid_line\",\"node_connections\":[\"97503c07-3a1a-4610-9143-4deac0e11d95\",\"daeec96e-1a37-4726-88d6-ce425e12e0fe\"],\"type_specific\":{\"annotation\":\"\",\"preventOutputCopy\":false}},{\"id\":\"aa91be91-9a52-4b2d-843b-ab68eef061f5\",\"type\":\"solid_arrow\",\"node_connections\":[\"daeec96e-1a37-4726-88d6-ce425e12e0fe\",\"a811b575-9dd0-4aea-80b1-62ce6dec0e39\"],\"type_specific\":{\"annotation\":\"\"}}]}",
"color": "note-color-4",
"auto_size": false,
"attachments": {}
}
},
{
"id": "4aac5577-70b1-48fb-8461-98f0f0f2e878",
"type": "setup",
"position": {
"x": 1020,
"y": -790
},
"size": {
"width": 280,
"height": 180
},
"type_specific": {
"bot_type": "chat-gpt-40",
"setup_args": {
"system_setup": "Du erh\u00e4lst Halerium Board Templates im json format. Hilf dem User, die Templates zu verwenden.\n\nDas Template befindet sich bereits in Halerium.\n\nDu bist in einer Chatkarte auf diesem Template.\n\n### Generelle Informationen\nHalerium Boards beinhalten \"Karten\" (json: \"nodes\"), zwischen denen es Verbindungen (json: \"edges\") gibt. Die Richtung einer Verbindung gibt den Informationsfluss an.\n\nBeispiel:\nKarte A und Karte B sind miteinander in Richtung A->B verbunden. Karte B hat also Zugriff auf den Inhalt von Karte A.\n\nEs gibt vier verschiedene Kartentypen:\n1. \"note\": Eine Notizkarte. Diese kann entweder Kontext bereitstellen (als Karte A fungieren), oder als Output verwendet werden (als Karte B fungieren)\n2. \"assistant-setup-note\": Eine \"Bot-Setup\" Karte, in der ein Bot ausgew\u00e4hlt (\"assistent_type\") und personalisiert (\"system_setup\") werden kann\n3. \"prompt-note\": Eine \"Chatkarte\", \u00fcber die der User mit dem Bot kommunizieren kann und ihm Anweisungen geben kann. Es gibt mehrere Buttons:\n- Prompt senden: f\u00fchrt nur diese Chatkarte aus\n- \"Fast Forward\": f\u00fchrt diese und alle folgenden Chatkarten aus\n- Prompt erneut senden: f\u00fchrt diese Chatkarte erneut aus (nur sichtbar wenn die Karte bereits mindestens einmal ausgef\u00fchrt wurde)\n4. \"vectorstore-note\": Diese Karte repr\u00e4sentiert eine Datei, die per Rechtsklick -> \"Add to board\" bereitgestellt wurde. Sie kann mit einer Chatkarte verbunden weren und stellt dieser so den Inhalt der Datei zur Verf\u00fcgung.\n5. Eine Kette aus einer Setup Karte und mehrerer Chat Karten wird als \"Prompt-Chain\" bezeichnet\n\n### Spezielle Informationen\n1. Dieses Template ist f\u00fcr das Refactoren und das Reviewen von Code gedacht.\n2. Code kann entweder in eine Notizkarte kopiert werden, oder als vectorstore-note auf das Board gebracht werden.\n3. Nach Ausf\u00fchren der Prompt-Chain (per Klick auf den \"Fast-Forward\" Button in der ersten Chatkarte) wird der Code automatisch refactored und reviewed.\n4. Der verbesserte Code wird automatisch unter den originalen Code kopiert und steht so f\u00fcr weitere Durchl\u00e4uft zur Verf\u00fcgung.\n\nDieser Workflow kann und soll mehrfach ausgef\u00fchrt werden, bis dass Ergebnis zufriedenstellend ist.\n\n\n### Weitere Anweisungen\n- Antworte immer im Kontext der speziellen Informationen.\n- Antworte immer in der Sprache des Users.\n\n"
},
"auto_size": false
}
}
],
"edges": [
{
"id": "c8952790-e35c-4139-8de5-b5f53cb4b313",
"type": "prompt_line",
"connections": {
"source": {
"id": "310ba733-39a1-4ca6-8bc9-091054eeb6e3",
"connector": "prompt-output"
},
"target": {
"id": "42d4469d-f3f5-4c5a-8a7e-e840ac55f5a6",
"connector": "prompt-input"
}
},
"type_specific": {}
},
{
"id": "73363b63-965b-45ef-b3ba-ac6842d4fdc2",
"type": "solid_arrow",
"connections": {
"source": {
"id": "a811b575-9dd0-4aea-80b1-62ce6dec0e39",
"connector": "note-left"
},
"target": {
"id": "42d4469d-f3f5-4c5a-8a7e-e840ac55f5a6",
"connector": "context-input"
}
},
"type_specific": {}
},
{
"id": "da1de5cc-e333-47cc-8cd4-9748554410b6",
"type": "prompt_line",
"connections": {
"source": {
"id": "42d4469d-f3f5-4c5a-8a7e-e840ac55f5a6",
"connector": "prompt-output"
},
"target": {
"id": "97503c07-3a1a-4610-9143-4deac0e11d95",
"connector": "prompt-input"
}
},
"type_specific": {}
},
{
"id": "99db9793-679b-4e4f-a029-6aa3652f9736",
"type": "prompt_line",
"connections": {
"source": {
"id": "97503c07-3a1a-4610-9143-4deac0e11d95",
"connector": "prompt-output"
},
"target": {
"id": "daeec96e-1a37-4726-88d6-ce425e12e0fe",
"connector": "prompt-input"
}
},
"type_specific": {}
},
{
"id": "aa91be91-9a52-4b2d-843b-ab68eef061f5",
"type": "solid_arrow",
"connections": {
"source": {
"id": "daeec96e-1a37-4726-88d6-ce425e12e0fe",
"connector": "context-output"
},
"target": {
"id": "a811b575-9dd0-4aea-80b1-62ce6dec0e39",
"connector": "note-right"
}
},
"type_specific": {}
},
{
"id": "ab4c7bc8-db23-457c-b0fa-9390842154fe",
"type": "prompt_line",
"connections": {
"source": {
"id": "4aac5577-70b1-48fb-8461-98f0f0f2e878",
"connector": "prompt-output"
},
"target": {
"id": "c461f228-9a3f-4d96-9592-497764560dab",
"connector": "prompt-input"
}
},
"type_specific": {}
},
{
"id": "0b134141-ccf0-479a-9501-29a85b34f90e",
"type": "solid_arrow",
"connections": {
"source": {
"id": "0e739c1a-a31a-4fa9-b6cf-ab725a9620f8",
"connector": "note-right"
},
"target": {
"id": "c461f228-9a3f-4d96-9592-497764560dab",
"connector": "context-input"
}
},
"type_specific": {}
}
]
}