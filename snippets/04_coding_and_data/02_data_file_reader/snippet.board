{"version":"1.2","nodes":[{"id":"62e68db0-e608-4327-a167-899110e50b15","type":"note","position":{"x":910,"y":240},"size":{"width":540,"height":698.7272727272727},"type_specific":{"color":"note-color-3","title":"Instructions","message":"### Step-by-Step Instructions for Handling Excel and CSV Files\n\n#### 1. Data Understanding Assistance\n\n##### Step 1: Identify and Understand the Data Format\n- **Goal:** Understand the user's data and what they want to achieve.\n- **Actions:**\n  1. **Initial Inquiry:** Ask the user what they want to achieve from this task. If they are unsure, ask how many files they have and the type of file.\n  2. **File Type Identification:** If the user is unaware of the type of data, ask for the file extension (e.g., CSV, JSON, Excel, etc.). If they are still unsure, guide them to upload the file to the Halerium board.\n  3. **Loading Data:** Once the file type is identified, generate the appropriate Python code to load the data into a pandas DataFrame.\n\n##### Loading Excel Files\n```python\nimport pandas as pd\n\nfilepath = 'path/to/your/datafile.xlsx'  # Replace with your file path\ndf = pd.read_excel(filepath)\n```\n\n##### Loading CSV Files\nFor CSV files, several common issues can arise. Here are some solutions:\n\n1. **Delimiter Issues:**\n   ```python\n   df = pd.read_csv(file_path, delimiter=';')  # Specify the correct delimiter\n   ```\n\n2. **Encoding Issues:**\n   ```python\n   df = pd.read_csv(file_path, encoding='ISO-8859-1')  # Specify the correct encoding\n   ```\n\n3. **Header Issues:**\n   ```python\n   df = pd.read_csv(file_path, header=1)  # If the actual header is the second row\n   df = pd.read_csv(file_path, header=None)  # If there is no header row\n   ```\n\n4. **Missing or Extra Columns:**\n   ```python\n   df = pd.read_csv(file_path, error_bad_lines=False)  # Skip problematic lines\n   ```\n\n5. **Mixed Data Types:**\n   ```python\n   df = pd.read_csv(file_path, dtype={'column_name': str})  # Specify data types if needed\n   ```\n\n6. **Special Characters:**\n   Ensure the correct encoding is used and handle special characters appropriately.\n\n7. **Large Files:**\n   ```python\n   for chunk in pd.read_csv(file_path, chunksize=10000):\n       process(chunk)\n   ```\n\n8. **Irregular Structure:**\n   ```python\n   df = pd.read_csv(file_path, skiprows=[0, 2])  # Skip specific rows\n   ```\n\n##### Example Code to Handle Common Issues in CSV Files\n```python\nimport pandas as pd\n\n# Specify the file path\nfile_path = '/path/to/your/csvfile.csv'\n\n# Read the CSV file with appropriate parameters\ndf = pd.read_csv(\n    file_path,\n    delimiter=';',  # Specify the correct delimiter\n    encoding='ISO-8859-1',  # Specify the correct encoding\n    header=1,  # Specify the correct header row\n    error_bad_lines=False,  # Skip problematic lines\n    dtype={'column_name': str}  # Specify data types if needed\n)\n\n# Display the first few rows of the DataFrame\nprint(df.head())\n```\n\n##### Step 2: Interpret the Data Structure\n- **Goal:** Understand the structure and content of the data.\n- **Actions:**\n  1. **View Data:** Use `df.head()` to view the first few rows of the DataFrame.\n  2. **Identify Columns and Data Types:** Use `df.info()` to identify the columns and their data types.\n  3. **Summary:** Generate a summary about the data structure and formulate a plan to proceed with the dataset (e.g., cleaning, merging, or suggesting a model).\n\n#### 2. Data Cleaning Advice\n\n##### Step 1: Check for Missing Values and Duplicates\n- **Goal:** Clean the data by handling missing values and duplicates.\n- **Actions:**\n  1. **Identify Missing Values:** Use `df.isnull().sum()` to check for missing values.\n  2. **Identify Duplicates:** Use `df.duplicated().sum()` to check for duplicate rows.\n  3. **Decision Making:** Decide whether to fill missing values, drop them, or drop duplicate rows based on the user's analysis needs.\n\n##### Step 2: Merging Different Files (if applicable)\n- **Goal:** Merge data from different files if needed.\n- **Actions:**\n  1. **User Input:** Check with the user how they would like to merge the files.\n  2. **Code Generation:** Generate the necessary code to merge the files and understand the dataset before providing advice.","auto_size":false,"attachments":{}}},{"id":"70660d3e-1192-42d5-9dce-dc74beac017d","type":"setup","position":{"x":1040,"y":992},"size":{"width":280,"height":510},"type_specific":{"bot_type":"chat-gpt-40","setup_args":{"system_setup":"Important: Only output the final code that is sucessful after trying the different methods","default_functions":["websearch"],"runner_functions":[]},"auto_size":false}},{"id":"9756ab88-1bed-40f0-a87e-0c9f10585435","type":"bot","position":{"x":1400,"y":992},"size":{"width":520,"height":515.9166564941406},"type_specific":{"prompt_input":"list the files in the current directory","prompt_output":"","state":"success","split_size":[7.60891129951989,92.39108870048011],"auto_size":false,"attachments":{}}},{"id":"8532c83f-edaa-4073-920d-9b9e5abfce5f","type":"bot","position":{"x":2010,"y":992},"size":{"width":560,"height":520.1146233298562},"type_specific":{"prompt_input":"Read the file given in the context card. If you face errors used the different methods to debug it\n","prompt_output":"","state":"success","split_size":[9.496346508375245,90.50365349162476],"auto_size":false,"attachments":{}}},{"id":"db73f318-59a7-4132-9f6b-5139ac69dd80","type":"bot","position":{"x":2650,"y":992},"size":{"width":520,"height":515.9166395399305},"type_specific":{"prompt_input":"Do the following data cleaning steps","prompt_output":"","state":"success","split_size":[9.73307202528621,90.2669279747138],"auto_size":false,"attachments":{}}},{"id":"43d7f798-0ceb-47e3-b51f-0cb8f1ee452f","type":"note","position":{"x":2030,"y":750},"size":{"width":340,"height":200},"type_specific":{"color":"note-color-5","title":"","message":"[Name of the file to read]\n\n[Additional instructions about the file if known]\n\n","auto_size":false,"attachments":{}}},{"id":"6881d9f3-1394-4db3-b618-c9887e9a7273","type":"note","position":{"x":3290,"y":750},"size":{"width":330,"height":200},"type_specific":{"color":"note-color-5","title":"","message":"Name of the file: sucessful_test.csv\nFile destination: /home/jovyan/","auto_size":false,"attachments":{}}},{"id":"6508aa33-b964-4bcf-bb43-d3cdde688fdb","type":"bot","position":{"x":3270,"y":992},"size":{"width":520,"height":512.1406021118164},"type_specific":{"prompt_input":"Save the file in /home/jovyan/","prompt_output":"","state":"success","split_size":[11.756775936458112,88.24322406354189],"auto_size":false,"attachments":{}}},{"id":"6ebdc036-0597-44ac-aaee-9203cedde201","type":"note","position":{"x":2640,"y":740},"size":{"width":340,"height":210},"type_specific":{"color":"note-color-5","title":"","message":"[Mention how you want to clean / manipulate the data in the file]\n","auto_size":false,"attachments":{}}}],"edges":[{"id":"bc3fcc01-5757-47e3-a893-3de85646dacd","type":"prompt_line","connections":{"source":{"connector":"prompt-output","id":"70660d3e-1192-42d5-9dce-dc74beac017d"},"target":{"connector":"prompt-input","id":"9756ab88-1bed-40f0-a87e-0c9f10585435"}},"type_specific":{}},{"id":"c1092938-e067-4ca4-89da-1af14d7b97df","type":"prompt_line","connections":{"source":{"connector":"prompt-output","id":"9756ab88-1bed-40f0-a87e-0c9f10585435"},"target":{"connector":"prompt-input","id":"8532c83f-edaa-4073-920d-9b9e5abfce5f"}},"type_specific":{}},{"id":"c02e6682-fdf7-4086-ad76-64d45615c6d2","type":"prompt_line","connections":{"source":{"connector":"prompt-output","id":"8532c83f-edaa-4073-920d-9b9e5abfce5f"},"target":{"connector":"prompt-input","id":"db73f318-59a7-4132-9f6b-5139ac69dd80"}},"type_specific":{}},{"id":"40503bf0-cfa0-44fc-8d7c-1b431d8ecaa0","type":"solid_arrow","connections":{"source":{"connector":"note-bottom","id":"62e68db0-e608-4327-a167-899110e50b15"},"target":{"connector":"context-input","id":"70660d3e-1192-42d5-9dce-dc74beac017d"}},"type_specific":{}},{"id":"feefae33-46ae-4649-91f3-b5f9efd55aff","type":"solid_arrow","connections":{"source":{"connector":"note-bottom","id":"43d7f798-0ceb-47e3-b51f-0cb8f1ee452f"},"target":{"connector":"context-input","id":"8532c83f-edaa-4073-920d-9b9e5abfce5f"}},"type_specific":{}},{"id":"31db51d0-6741-4ba6-bb26-f6bef760713c","type":"solid_arrow","connections":{"source":{"connector":"note-bottom","id":"6ebdc036-0597-44ac-aaee-9203cedde201"},"target":{"connector":"context-input","id":"db73f318-59a7-4132-9f6b-5139ac69dd80"}},"type_specific":{}},{"id":"410256da-b9f6-45f4-8138-f15bd973f2b0","type":"solid_arrow","connections":{"source":{"connector":"note-bottom","id":"6881d9f3-1394-4db3-b618-c9887e9a7273"},"target":{"connector":"context-input","id":"6508aa33-b964-4bcf-bb43-d3cdde688fdb"}},"type_specific":{}},{"id":"418453fe-28a1-41e6-9fba-b2153f91e251","type":"prompt_line","connections":{"source":{"connector":"prompt-output","id":"db73f318-59a7-4132-9f6b-5139ac69dd80"},"target":{"connector":"prompt-input","id":"6508aa33-b964-4bcf-bb43-d3cdde688fdb"}},"type_specific":{}}]}