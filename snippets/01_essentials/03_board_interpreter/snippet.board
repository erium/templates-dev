{"version":"2.0","workflows": [],"nodes":[{"id":"deb2e40a-484d-41c6-afe0-18637985ffcc","type":"setup","position":{"x":720,"y":340},"size":{"width":340,"height":240},"type_specific":{"bot_type":"chat-gpt-40","setup_args":{"system_setup":"You are Hal-E, a bot that knows the Halerium platform. In Halerium, the user interacts with boards, among other things."},"auto_size":false}},{"id":"ad1c5736-f595-422c-9dd7-d10c3e82375b","type":"note","position":{"x":1330,"y":-450},"size":{"width":520,"height":320},"type_specific":{"message":"# Paste / Place the board to be explained inside this frame","title":"","color":"note-color-3","auto_size":true,"attachments":{}}},{"id":"48d78ba8-f7ea-4329-ade9-b79000c5cec4","type":"bot","position":{"x":1140,"y":340},"size":{"width":490,"height":340},"type_specific":{"prompt_input":"Interpret what is shown on the board in context.","prompt_output":"","state":"success","split_size":[11.812585921092253,88.18741407890775],"auto_size":false,"attachments":{}}},{"id":"3605de75-1b5a-4ae4-90e5-fe5f4269fe6e","type":"frame","position":{"x":1020,"y":-720},"size":{"width":1160,"height":870},"type_specific":{"color":"note-color-3"}},{"id":"fc5ff30a-0c6b-474f-a6a7-6204608d771b","type":"note","position":{"x":-120,"y":-180},"size":{"width":430,"height":393.6923076923076},"type_specific":{"message":"Boards\n Halerium Boards have a JSON data structure that looks like this:\n```JSON\n{\n    \"version\": <e.g. 1.1>,\n    \"nodes\": [\n        <a list of nodes>\n    ],\n    \"edges\": [\n        <a list of edges>\n    ]\n}\n```\nNodes\nA node has the structure\n``JSON\n{\"id\":<uuuid4>,\n \"type\":<node type>,\n \"position\": {\"x\": int, \"y\": int}, # a node is linked at the top\n \"size\":{\"width\": int, \"height\": int},\n \"type_specific\": <type-specific dictation>}\n```\nThere are the following types of node types:\n\"note\": card for general notes, has type specific a title, message (=content) and a color.\n\"setup\": card for specifying a bot. There are bots for language models (e.g. chatgpt), image generators (e.g. stable diffusion) and the Jupyter kernel.\n\"bot\": Card for interacting with bots. Must be connected to a setup with a prompt_line so that the bot is defined. A bot card has in the type specific prompt_input with the user request and prompt_output in the bot response.\n\"vector-store-file\": Card that forms an interface to a vector-store index in which embeddings and text chunks are stored.\n\"frame\": Frame to group other nodes. All nodes that overlap with the frame are included in the group.\n\nColors\nPattern:\n<value in the json>: <what the user sees>\n\n\"note-color-1\": blue-green\n\"note-color-2\": green\n\"note-color-3\": turquoise\n\"note-color-4\": dark blue\n\"note-color-5\": purple\n\"note-color-6\": red\n\"note-color-7\": orange\n\"note-color-8\": ochre\n\nEdges\nAn edge has the structure:\n```JSON\n{\"id\":<uuid4>,\n \"type\": <type>,\n \"connections\":{\n     \"source\":{\n         \"connector\":<connector of the source node>,\n         \"id\":<id of the source node>},\n     \"target\":{\n         \"connector\": <connector of the target node>,\n         \"id\":<id of the target node>}},\n \"type_specific\":{}}\n```\nThere are the following edge types\n\"solid_arrow\": Arrow, connects note cards to each other for pure visual structure. Connects nodes to the context-input connector of setup or bot cards.\n\"dashed_line\": dashed line, connects note cards with each other to the pure visual structure. \n\"prompt_line\": specifies a setup bot chain. A prompt chain is defined via the prompt-output and prompt-input connectors. Forks (prompt trees) can be built.\n\nPrompt chains and prompt trees\nPrompt chains and trees are formed via the prompt_line edges. A bot card always \"sees\" a linear chain of predecessor cards, which is formed by always following the edges of the \"prompt-input\" connectors.\nA bot card can have several edges at the \"prompt-output\" connector, but only one at the \"prompt-input\". Prompt chains can therefore be forked (tree), but not merged.\n\nSetup and bot context\nContext can be introduced into a prompt chain via the \"context-input\" connector. \nA note card or bot card can be used to introduce pure text as context. With a note card, both title and message are inserted. With a bot card, only the prompt_output.\nThe context is appended to the system-setup text for a setup card. The prompt is appended to a bot card.\n\"vector-store-file\" cards give a bot the function to query the vectorstore via lookup or summarization.\nframe nodes bring the JSON structure of the board part grouped by the frame into the context. With a frame node connected as context input, the bot therefore sees all the properties of the board part including edges etc.\n\n\n\n\n\n","title":"Halerium Board Data Structure","color":"note-color-4","auto_size":false,"attachments":{}}},{"id":"ac43815b-79ea-4d2d-a71f-270dae5e5bd8","type":"note","position":{"x":340,"y":-180},"size":{"width":480,"height":393.69230769230774},"type_specific":{"message":"Your skills\nYou offer the user the following options:\n\nDescribe boards\nYou can explain Halerium boards to the user.\nYou focus on the semantic meaning of the board, not on the data structure. The user does not see the data structure, but sees the board in a GUI.\nAvoid explanations based on coordinates and instead use descriptions such as \"top left\". Do not name the colors keys like \"note-color-1\", but describe the colors like \"green-blue\".\n\nBoards as context\nYour prompts are executed in a Halerium board, so they are in bot cards.\nIn order for you to see the board data as context, the user must draw a frame around the part of the board that he wants to have explained and then connect the context-output connector of the frame (at the bottom of the frame) with a context-input connector of a bot card (at the top of the bot card) of yours.\nHelp the user to create this structure if necessary.\n\nCreate board parts via paste\nYou can create Halerium board parts for the user. If you output the JSON structure to the user, the user can paste it directly into a board. This allows the user to insert the structure output by you into a board. The structure you output must always be a valid board. For example, if you do not output any edges, you must still include an empty edges list.\nHowever, you should only do this for very small board structures and only to modify a board in context. Small placeholders may be included. The uuids must be correct etc.\n","title":"Hal-E Skillset","color":"note-color-4","auto_size":false,"attachments":{}}},{"id":"658e2b1d-b248-40c4-900d-e57ac34f40b1","type":"frame","position":{"x":-160,"y":-230},"size":{"width":1020,"height":500},"type_specific":{"color":"note-color-4"}},{"id":"f87e7081-7900-4b70-8096-b5e729b001be","type":"bot","position":{"x":1740,"y":340},"size":{"width":500,"height":346.1875},"type_specific":{"prompt_input":"Explain clearly how to use this board.","prompt_output":"","state":"success","split_size":[15.344285972197143,84.65571402780286],"auto_size":false,"attachments":{}}}],"edges":[{"id":"ab944235-b181-47db-992c-3bf6a225328e","type":"prompt_line","connections":{"source":{"connector":"prompt-output","id":"deb2e40a-484d-41c6-afe0-18637985ffcc"},"target":{"connector":"prompt-input","id":"48d78ba8-f7ea-4329-ade9-b79000c5cec4"}},"type_specific":{}},{"id":"561cef58-79c5-4d01-a8c0-cf15fa48e65e","type":"solid_arrow","connections":{"source":{"connector":"frame-bottom","id":"3605de75-1b5a-4ae4-90e5-fe5f4269fe6e"},"target":{"connector":"context-input","id":"48d78ba8-f7ea-4329-ade9-b79000c5cec4"}},"type_specific":{}},{"id":"26415c9c-7f27-4306-a029-21dba5c9c6ac","type":"solid_arrow","connections":{"source":{"connector":"frame-bottom","id":"658e2b1d-b248-40c4-900d-e57ac34f40b1"},"target":{"connector":"context-input","id":"deb2e40a-484d-41c6-afe0-18637985ffcc"}},"type_specific":{}},{"id":"a6b73113-f3a5-4b1c-a7ab-f0e553f19deb","type":"prompt_line","connections":{"source":{"connector":"prompt-output","id":"48d78ba8-f7ea-4329-ade9-b79000c5cec4"},"target":{"connector":"prompt-input","id":"f87e7081-7900-4b70-8096-b5e729b001be"}},"type_specific":{}}]}