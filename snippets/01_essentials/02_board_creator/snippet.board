{"version":"2.0","workflows": [],"nodes":[{"id":"867cf0f7-8919-4e49-b2e4-acbdcb08fcf7","type":"setup","position":{"x":-810,"y":-1470},"size":{"width":340,"height":330},"type_specific":{"bot_type":"chat-gpt-40-turbo","setup_args":{"system_setup":"You a bot that knows the Halerium platform. You are tasked to create boards for the user based on the knowledge provided.","default_functions":["websearch","image_generator","vision"],"runner_functions":[]},"auto_size":false}},{"id":"83f4ee31-9d1d-4a66-81ac-bd6cd921ae83","type":"bot","position":{"x":-370,"y":-1030},"size":{"width":510,"height":470},"type_specific":{"prompt_input":"","prompt_output":"","state":"success","split_size":[63.656574710680744,36.343425289319256],"auto_size":false,"attachments":{}}},{"id":"fc64982e-cd6d-4f63-b383-b9c74775a9c6","type":"bot","position":{"x":-370,"y":-1470},"size":{"width":510,"height":340},"type_specific":{"prompt_input":"Based on the description, create the board","prompt_output":"","state":"success","split_size":[15.47943248110895,84.52056751889106],"auto_size":false,"attachments":{}}},{"id":"fcb4f040-1285-4e0e-a9c9-3db64c30a131","type":"setup","position":{"x":-810,"y":-1030},"size":{"width":340,"height":210},"type_specific":{"bot_type":"jupyter-kernel","setup_args":{"system_setup":"Du bist ein hilfsbereiter Assistent."},"auto_size":false,"state":"canceled"}},{"id":"d198e992-aa6a-4018-b0a4-7a8add07e664","type":"note","position":{"x":-90,"y":-1820},"size":{"width":520,"height":320},"type_specific":{"message":"Board Name:\n- e.g. business model canvas\n\nContent of the board\n- e.g. The board will have a business model canvas","title":"Description of the board","color":"note-color-3","auto_size":true,"attachments":{}}},{"id":"7722f5a6-a6d2-41b5-bfb6-be75244ebf2b","type":"note","position":{"x":-1210,"y":-1700},"size":{"width":380,"height":394.82352941176475},"type_specific":{"color":"note-color-4","title":"Board Description","message":"Halerium boards have a JSON data structure that looks like this:\n```JSON\n{\n    \"version\": <e.g. 1.1>,\n    \"nodes\": [\n        <a list of nodes>\n    ],\n    \"edges\": [\n        <a list of edges>\n    ]\n}\n```\nNodes\nA node has the structure\n```JSON\n{\"id\":<uuuid4>,\n \"type\":<node type>,\n \"position\": {\"x\": int, \"y\": int}, # top left of a node\n \"size\":{\"width\": int, \"height\": int},\n \"type_specific\": <type specific dict>}\n```\nThere are the following types of node types:\n\"note\": card for general notes, type specific has a title, message (=content) and a color.\n\"setup\": card for specifying a bot. There are bots for language models (e.g. chatgpt), image generators (e.g. stable diffusion) and the Jupyter kernel.\n\"bot\": Card for interacting with bots. Must be connected to a setup with a prompt_line so that the bot is defined. A bot card has in the type specific prompt_input with the user request and prompt_output in the bot response.\n\"vector-store-file\": Card that forms an interface to a vector-store index in which embeddings and text chunks are stored.\n\"frame\": Frame to group other nodes. All nodes that overlap with the frame are included in the group.\n\nColors\n\"note-color-1\": blue-green\n\"note-color-2: green\n\"note-color-3\": turquoise\n\"note-color-4\": dark blue\n\"note-color-5\": purple\n\"note-color-6\": red\n\"note-color-7\": orange\n\"note-color-8\": ochre\n\nEdges\nAn edge has the structure:\n```JSON\n{\"id\":<uuuid4>,\n \"type\": <type>,\n \"connections\":{\n     \"source\":{\n         \"connector\":<connector of the source node>,\n         \"id\":<id of the source node>},\n     \"target\":{\n         \"connector\": <connector of the target node>,\n         \"id\":<id of the target node>}},\n \"type_specific\":{}}\n```\nThere are the following edge types\n\"solid_arrow\": Arrow, connects note cards with each other to form a purely visual structure. Connects nodes to the context-input connector of setup or bot cards.\n\"prompt_line\": specifies a setup bot chain. A prompt chain is defined via the prompt-output and prompt-input connectors. Forks (prompt trees) can be built.\n\nPrompt chains and prompt trees\nPrompt chains and trees are formed via the prompt_line edges. A bot card always \"sees\" a linear chain of predecessor cards, which is formed by always following the edges of the \"prompt-input\" connectors.\nA bot card can have several edges at the \"prompt-output\" connector, but only one at the \"prompt-input\". Prompt chains can therefore be forked (tree), but not merged.\n\nSetup and bot context\nContext can be introduced into a prompt chain via the \"context-input\" connector. \nA note card or bot card can be used to introduce pure text as context. With a note card, both title and message are inserted. With a bot card, only the prompt_output.\nThe context is appended to the system-setup text for a setup card. The prompt is appended to a bot card.\n\"vector-store-file\" cards give a bot the function to query the vectorstore via lookup or summarization.\nframe nodes bring the JSON structure of the board part grouped by the frame into the context. With a frame node connected as context input, the bot can therefore see all the properties of the board part, including edges etc.\n\nTasks\n\nCreate boards\nTo modify or create boards, you create python code. DO NOT USE ANY FUNCTION CALLING\n\nSave all board in the current directory.\n\nYour prompts are also controlled by the user via a Halerium board.\nYou can create and modify boards by following the instructions below:\n\nReading and initializing a board\n\n1. import the `board` class from the `halerium_utilities` package:\n   ``python\n   from halerium_utilities.board import Board\n   ```\n\n2. create a new board instance using either a dictionary or a JSON file:\n   ```python\n   # Empty\n   board = Board()\n\n   # With a dictionary\n   board_dict = {...}  # Replace this with the actual board dictionary\n   board = Board(board_dict)\n\n   # Or load a board from a JSON file\n   board = Board.from_json('path-to-json-file.json')\n\nAdding cards (nodes)\n\n1. use the `create_card` method to create a card:\n   ```python\n   note_card = Board.create_card(\n       type='note',\n       position={'x': 100, 'y': 100},\n       size={'width': 520, 'height': 320}, # optional\n       type_specific={ # optional\n           'title': 'My note',\n           'message': 'This is the content of my note',\n           'color': 'note-color-2' # green\n       }\n   )\n   ```\n\n2. add the created card to the board:\n   ```python\n   board.add_card(note_card)\n   ```\n\nHere, `note_card` is instantiated as a pydantic model. The id can be accessed via `node_card.id`, for example.\n\nFor setup cards, the bot type can be specified under type_specific[\"bot_type\"]. There is \n - \"chat-gpt-35\" (Chat-GPT 3.5 Turbo)\n - \"chat-gpt-40\" (Chat-GPT 4 Turbo)\n - \"chat-gpt-40-turbo\" ( Chat-GPT 4 Omni, can interpret and also generate images)\n - \"llama3\" (pure chat model)\n - \"snowflake-arctic\" (pure chat model)\n - \"dall-e\" (can interpret text2image and image2image)\n - \"stable-diffusion\" (can interpret text2image)\n\nThe system message can be specified for the chat-gpt and llama3 types in `type_specific[\"setup_args\"][\"system_setup\"] = <setup-message>`.\n\nAdd #### connections (edges)\n\n1. use the `create_connection` method to create a connection:\n   ```python\n   connection = Board.create_connection(\n       type='solid_arrow',\n       connections={\n           'source': {'connector': 'note-right', 'id': note_card.id},\n           'target': {'connector': 'context-input', 'id': setup_card.id}\n       }\n   )\n   ```\n`connection` is instantiated as a pydantic model. The id can be accessed via `connection.id`, for example.\n\n2. add the created connection to the board:\n   ```python\n   board.add_connection(connection)\n   ```\n\nUpdate cards\n\nUpdate a card using the `update_card` method:\n   ```python\n   board.update_card({\n       'id': note_card.id,\n       'position': {'x': 200}\n   })\n   ```\n\nRemove cards and connections\n\n1. remove a card with the `remove_card` method:\n   ```python\n   board.remove_card({'id': note_card.id})\n   ```\n\n2. remove a connection using the `remove_connection` method:\n   ```python\n   board.remove_connection({'id': connection.id})\n   ```\n\nSave the board\n\n1. save the board in a file:\n   ```python\n   # In a file\n   board.to_json('path-to-save.board') # the file extension is important\n   ```\n   Always save the board in a new file!\n\nObserve the connection rules\nNo edges may be created that are not described in the allowed_connections.\n\nPattern:\n((source-node-type, source-node-connector), edge-type, (target-node-type, target-node-connector))\n\n```python\nallowed_connections = [\n    # note-note\n    ((\"note\", \"note-left\"), \"solid_arrow\", (\"note\", \"note-left\")),\n    ((\"note\", \"note-left\"), \"solid_arrow\", (\"note\", \"note-right\")),\n    ((\"note\", \"note-right\"), \"solid_arrow\", (\"note\", \"note-left\")),\n    ((\"note\", \"note-right\"), \"solid_arrow\", (\"note\", \"note-right\")),\n\n    # note-bot\n    ((\"note\", \"note-right\"), \"solid_arrow\", (\"bot\", \"context-input\")),\n    ((\"note\", \"note-left\"), \"solid_arrow\", (\"bot\", \"context-input\")),\n\n    # note-setup\n    ((\"note\", \"note-right\"), \"solid_arrow\", (\"setup\", \"context-input\")),\n    ((\"note\", \"note-left\"), \"solid_arrow\", (\"setup\", \"context-input\")),\n\n    # vector-store-file-bot\n    ((\"vector-store-file\", \"context-output\"), \"solid_arrow\", (\"bot\", \"context-input\")),\n\n    # vector-store-file-setup\n    ((\"vector-store-file\", \"context-output\"), \"solid_arrow\", (\"setup\", \"context-input\")),\n\n    # vector-store-file-note\n    ((\"vector-store-file\", \"context-output\"), \"solid_arrow\", (\"note\", \"note-left\")),\n    ((\"vector-store-file\", \"context-output\"), \"solid_arrow\", (\"note\", \"note-right\")),\n\n    # bot-bot\n    ((\"bot\", \"context-output\"), \"solid_arrow\", (\"bot\", \"context-input\")),\n\n    # bot-setup\n    ((\"bot\", \"context-output\"), \"solid_arrow\", (\"setup\", \"context-input\")),\n\n    # bot-note\n    ((\"bot\", \"context-output\"), \"solid_arrow\", (\"note\", \"note-left\")),\n    ((\"bot\", \"context-output\"), \"solid_arrow\", (\"note\", \"note-right\")),\n\n    # frame-bot\n    ((\"frame\", \"context-output\"), \"solid_arrow\", (\"bot\", \"context-input\")),\n\n    # frame-setup\n    ((\"frame\", \"context-output\"), \"solid_arrow\", (\"setup\", \"context-input\")),\n\n    # frame-note\n    ((\"frame\", \"context-output\"), \"solid_arrow\", (\"note\", \"note-left\")),\n    ((\"frame\", \"context-output\"), \"solid_arrow\", (\"note\", \"note-right\")),\n\n    # note-note\n    ((\"note\", \"note-bottom\"), \"dashed_line\", (\"note\", \"note-top\")),\n\n    # bot-bot\n    ((\"bot\", \"prompt-output\"), \"prompt_line\", (\"bot\", \"prompt-input\")),\n\n    # setup-bot\n    ((\"setup\", \"prompt-output\"), \"prompt_line\", (\"bot\", \"prompt-input\")),\n]\n```\n\nCard sizes:\nFor bots use \"size\":{\"width\":340,\"height\":540} and for chat cards use \"size\":{\"width\":520,\"height\":320}","auto_size":false,"attachments":{}}}],"edges":[{"id":"7e33a88d-c30b-4434-b3ac-ea85e5066ecb","type":"prompt_line","connections":{"source":{"connector":"prompt-output","id":"867cf0f7-8919-4e49-b2e4-acbdcb08fcf7"},"target":{"connector":"prompt-input","id":"fc64982e-cd6d-4f63-b383-b9c74775a9c6"}},"type_specific":{}},{"id":"928dbcfb-f72a-46d1-ad81-7c88dac59bc2","type":"solid_arrow","connections":{"source":{"connector":"context-output","id":"fc64982e-cd6d-4f63-b383-b9c74775a9c6"},"target":{"connector":"context-input","id":"83f4ee31-9d1d-4a66-81ac-bd6cd921ae83"}},"type_specific":{}},{"id":"f2baf2a7-161b-41fb-b143-f6326b87b1b5","type":"prompt_line","connections":{"source":{"connector":"prompt-output","id":"fcb4f040-1285-4e0e-a9c9-3db64c30a131"},"target":{"connector":"prompt-input","id":"83f4ee31-9d1d-4a66-81ac-bd6cd921ae83"}},"type_specific":{}},{"id":"2aff0fd7-e436-4289-9263-58bcdea879e5","type":"solid_arrow","connections":{"source":{"connector":"note-left","id":"d198e992-aa6a-4018-b0a4-7a8add07e664"},"target":{"connector":"context-input","id":"fc64982e-cd6d-4f63-b383-b9c74775a9c6"}},"type_specific":{}},{"id":"9845e239-1c13-4c26-8b1f-fe9090cbfd9d","type":"solid_arrow","connections":{"source":{"connector":"note-right","id":"7722f5a6-a6d2-41b5-bfb6-be75244ebf2b"},"target":{"connector":"context-input","id":"867cf0f7-8919-4e49-b2e4-acbdcb08fcf7"}},"type_specific":{}}]}